"use strict";(self.webpackChunkmy_cheatsheet=self.webpackChunkmy_cheatsheet||[]).push([[989],{6913:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"structs-and-methods","title":"Structs, Pointers, and Methods in Go","description":"---","source":"@site/docs/structs-and-methods.md","sourceDirName":".","slug":"/structs-and-methods","permalink":"/cheatsheet/docs/structs-and-methods","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/structs-and-methods.md","tags":[],"version":"current","frontMatter":{"title":"Structs, Pointers, and Methods in Go"},"sidebar":"tutorialSidebar","previous":{"title":"Welcome to the Cheatsheet!","permalink":"/cheatsheet/docs/intro"}}');var r=n(4848),i=n(8453);const c={title:"Structs, Pointers, and Methods in Go"},o="Structs, Pointers, and Methods in Go",d={},a=[{value:"\ud83d\udce6 Why Use Pointers to Structs?",id:"-why-use-pointers-to-structs",level:2},{value:"\ud83e\udde0 Struct Memory Layout Tips",id:"-struct-memory-layout-tips",level:2},{value:"\ud83d\udd73\ufe0f Empty Structs in Go",id:"\ufe0f-empty-structs-in-go",level:2},{value:"Used often in:",id:"used-often-in",level:3},{value:"\ud83d\ude97 Example Struct with Nested Struct",id:"-example-struct-with-nested-struct",level:2},{value:"\ud83d\udd01 Updating Structs via Pointer",id:"-updating-structs-via-pointer",level:2},{value:"\ud83d\udce6 Embedded Structs (Pseudo-Inheritance)",id:"-embedded-structs-pseudo-inheritance",level:2},{value:"\ud83e\uddf0 Methods in Go",id:"-methods-in-go",level:2},{value:"\ud83e\uddea Main Function Example",id:"-main-function-example",level:2},{value:"\u2705 Key Takeaways",id:"-key-takeaways",level:2},{value:"Use pointers to structs for performance and mutability",id:"use-pointers-to-structs-for-performance-and-mutability",level:3},{value:"Struct field order matters for memory efficiency",id:"struct-field-order-matters-for-memory-efficiency",level:3},{value:"Use embedded structs for composition",id:"use-embedded-structs-for-composition",level:3},{value:"Go supports methods with receivers",id:"go-supports-methods-with-receivers",level:3},{value:"Empty structs are useful for zero-size placeholders",id:"empty-structs-are-useful-for-zero-size-placeholders",level:3}];function l(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"structs-pointers-and-methods-in-go",children:"Structs, Pointers, and Methods in Go"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-why-use-pointers-to-structs",children:"\ud83d\udce6 Why Use Pointers to Structs?"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Efficiency"}),": Passing a pointer to a struct (e.g., ",(0,r.jsx)(t.code,{children:"*Person"}),") avoids copying the entire struct \u2014 faster and more memory-efficient."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Mutability"}),": You can modify the original data when passing by pointer."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-struct-memory-layout-tips",children:"\ud83e\udde0 Struct Memory Layout Tips"}),"\n",(0,r.jsxs)(t.p,{children:["Structs are stored ",(0,r.jsx)(t.strong,{children:"contiguously in memory"}),", field by field.",(0,r.jsx)(t.br,{}),"\n","To avoid ",(0,r.jsx)(t.strong,{children:"wasted memory"})," from padding:"]}),"\n",(0,r.jsxs)(t.p,{children:["\u2705 ",(0,r.jsx)(t.strong,{children:"Preferred layout:"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"type stats struct {\n\tReach    uint16\n\tNumPosts uint8\n\tNumLikes uint8\n} // 4 bytes used efficiently\n"})}),"\n",(0,r.jsx)(t.p,{children:"\u274c Bad layout (2 bytes wasted):"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"type stats struct {\n\tNumPosts uint8\n\tReach    uint16\n\tNumLikes uint8\n} // 6 bytes, with 2 bytes padding\n"})}),"\n",(0,r.jsx)(t.h2,{id:"\ufe0f-empty-structs-in-go",children:"\ud83d\udd73\ufe0f Empty Structs in Go"}),"\n",(0,r.jsx)(t.p,{children:"Empty structs take up zero bytes of memory!"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"// anonymous empty struct\nempty := struct{}{}\n\n// named empty struct\ntype emptyStruct struct{}\nempty := emptyStruct{}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"used-often-in",children:"Used often in:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"[string]struct{}"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"chan struct{}"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"-example-struct-with-nested-struct",children:"\ud83d\ude97 Example Struct with Nested Struct"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"type Car struct {\n\tmodel        string\n\tdateAcquired string\n\tmiles        int\n\tcylinders    int\n\tcomputer     struct {\n\t\tCPU     string\n\t\tCORES   int\n\t\tGPU     string\n\t\tWattage int\n\t\tisOn    bool\n\t\tage     int\n\t}\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"-updating-structs-via-pointer",children:"\ud83d\udd01 Updating Structs via Pointer"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'func updateCarModelStruct(pointer *Car) {\n\tpointer.model = "Honda"\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Using a pointer allows direct modification of the original struct instance."}),"\n",(0,r.jsx)(t.h2,{id:"-embedded-structs-pseudo-inheritance",children:"\ud83d\udce6 Embedded Structs (Pseudo-Inheritance)"}),"\n",(0,r.jsx)(t.p,{children:"There\u2019s no real inheritance in Go, but you can embed structs:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"type car struct {\n  brand string\n  model string\n}\n\ntype truck struct {\n  car      // embedded\n  bedSize int\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"You can access lanesTruck.brand or lanesTruck.model directly."}),"\n",(0,r.jsx)(t.h2,{id:"-methods-in-go",children:"\ud83e\uddf0 Methods in Go"}),"\n",(0,r.jsx)(t.p,{children:'Go supports "methods" \u2014 functions with receivers:'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"type rect struct {\n\twidth  int\n\theight int\n}\n\nfunc (r rect) area() int {\n\treturn r.width * r.height\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"Usage:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"r := rect{width: 5, height: 10}\nfmt.Println(r.area())  // 50\n"})}),"\n",(0,r.jsx)(t.h2,{id:"-main-function-example",children:"\ud83e\uddea Main Function Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'func main() {\n\tMycar := Car{\n\t\tmodel:        "Toyota",\n\t\tdateAcquired: "22/06/2014",\n\t\tmiles:        78212,\n\t\tcylinders:    6,\n\t\tcomputer: computer{\n\t\t\tCPU:     "INTEL",\n\t\t\tCORES:   8,\n\t\t\tGPU:     "NVIDIA",\n\t\t\tWattage: 750,\n\t\t\tisOn:    true,\n\t\t\tage:     2,\n\t\t},\n\t}\n\n\tMycarpointer := &Mycar\n\tupdateCarModelStruct(Mycarpointer)\n\tfmt.Println(Mycar)\n\n\tlanesTruck := truck{\n\t\tbedSize: 10,\n\t\tcar: car{\n\t\t\tbrand: "Toyota",\n\t\t\tmodel: "Tundra",\n\t\t},\n\t}\n\n\tfmt.Println(lanesTruck.brand) // Toyota\n\tfmt.Println(lanesTruck.model) // Tundra\n\n\tfmt.Println(r.area()) // 50\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"-key-takeaways",children:"\u2705 Key Takeaways"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.h3,{id:"use-pointers-to-structs-for-performance-and-mutability",children:"Use pointers to structs for performance and mutability"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.h3,{id:"struct-field-order-matters-for-memory-efficiency",children:"Struct field order matters for memory efficiency"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.h3,{id:"use-embedded-structs-for-composition",children:"Use embedded structs for composition"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.h3,{id:"go-supports-methods-with-receivers",children:"Go supports methods with receivers"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.h3,{id:"empty-structs-are-useful-for-zero-size-placeholders",children:"Empty structs are useful for zero-size placeholders"}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var s=n(6540);const r={},i=s.createContext(r);function c(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);